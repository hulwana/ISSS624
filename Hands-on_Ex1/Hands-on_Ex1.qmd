---
title: "Hands-on Exercise 1: Geospatial Data Wrangling  with R"
author: "Hulwana"
editor: visual
---

## 1 Overview

In this hands-on exercise, I learn how to import and wrangle geospatial data using appropriate R packages.

## 1.1 Getting Started

The code chunk below install and load the following packages into R environment.

-   [**sf**](https://r-spatial.github.io/sf/) : for importing, managing and processing geospatial data

-   [**tidyverse**](https://www.tidyverse.org/) : for data preparation such as importing, wrangling and visualizing data

```{r}
pacman::p_load(sf, tidyverse)
```

## 1.2 Importing Geospatial Data

Unlike general data saved in excel or csv, geospatial data has to be read by the *st_read()* function of the **sf** package to capture the polygon feature. An example of importing geospatial data is as shown below.

### 1.2.1 Importing polygon feature data in shapefile format

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

The above message indicates that the geospatial data consists of 323 multipolygon features and 15 fields.

### 1.2.2 Importing polyline feature data in shapefile form

The code chunk below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.

```{r}
cyclingpath <- st_read(dsn = "data/geospatial", 
                         layer = "CyclingPath")
```

The above message reveals that there are a total of 1625 Linestring features and 2 fields in 'CyclingPath' and it is in svy21 projected coordinates system too.

### 1.2.3 Importing GIS data in kml format

As the `pre-schools-location-kml` is in kml format, the syntax for importing the data differs slightly.

```{r}
preschool <- st_read("data/geospatial/pre-schools-location-kml.kml")
```

## 1.3 Viewing the data frame

In this sub-section, we will retrieve information related to the content of a simple feature data frame.

### 1.3.1 Working with *st_geometry()*

The column in the sf data.frame that contains the geometries is a list, of class `sfc`. We can retrieve the geometry list-column in this case by mpsz\$geom or mpsz\[\[1\]\], but the more general way uses *st_geometry()* as shown in the code chunk below.

```{r}
st_geometry(mpsz)
```

However, the *st_geometry()* function only provides basic geospatial information such as the number of features and the geometric type for which in this case it is a multipolygon.

### **1.3.2 Working with *glimpse()***

To get an overview on other non-geospatial data we will use *glimpse()*.

```{r}
glimpse(mpsz)
```

From the above output, we have a glimpse of the fields available in the dataset and their respective data type. For example 'OBJECTID' and 'SUBZONE_NO' are both **integer** data type whereas `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.

**1.3.3 Working with *head()***

To view the first 5 observations, we can use the function *head()*. By default, it will show the first 6 observations. To view a specific number of observation based on the top of the data table, it can be specified in the function by the code "n=5".

```{r}
head(mpsz, n = 5)
```

## 2 Plotting the Geospatial Data

## 2.1 Overview plot

To visualize geospatial data, we will use the function *plot()*.

```{r}
plot(mpsz)
```

The above plot showcases a multi-plot of all attributes.

### 2.1.1 Plot Geometry Only

To get the main geometry, we can run the st_geometry() function within the plot() function.

```{r}
plot(st_geometry(mpsz))
```

### 2.1.2 Plot for a Particular Attribute

We can also choose to plot the sf object based on a specific attribute by indicating the attribute into the code chunk as shown:

```{r}
plot(mpsz["PLN_AREA_N"])
```

## 3 Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

In this section we will perform projection transformation in which a simple feature data frame will be projected from one coordinate system to another coordinate system.

## 3.1 Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

This is an example the coordinate system of `mpsz` simple feature data frame by using *st_crs()* of *sf* package as shown in the code chunk below.

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

In order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Now, let us check the CSR again by using the code chunk below:

```{r}
st_crs(mpsz3414)
```

The ESPG code has been updated to 3414.

## 3.2 Transforming the projection of preschool from wgs84 to svy21

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

Let us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

```{r}
st_geometry(preschool)
```

This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.

Let us perform the projection transformation by using the code chunk below.

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
```

Next, let us display the content of preschool3414 sf data frame as shown below.

```{r}
st_geometry(preschool3414)
```

Notice that it is in svy21 projected coordinate system now. Furthermore, if you refer to *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.

## 4 Importing and Converting An Aspatial Data

In practice, it is not unusual that we will come across data such as `listing` of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

In this section, you will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.

For the purpose of this exercise, the `listings.csv` data downloaded from AirBnb will be used.

## 4.1 Importing the Aspatial Data

Since `listings` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

The output reveals that `listing` tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.

4.2 Creating a simple feature data frame from an aspatial data frame
The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Things to learn from the arguments above:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country\'s epsg code by referring to [epsg.io](https://epsg.io/).

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

Table above shows the content of `listing_sf`. Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

## 






