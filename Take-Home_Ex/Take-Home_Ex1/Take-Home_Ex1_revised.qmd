---
title: "Take Home Exercise 1"
author: "Hulwana"
editor: visual
execute:
  warning: false
  message: false
---

## 1 Overview

## 1.1 Getting Started

In the code chunk below, `p_load()` of *pacman* package is used to install and load the following R packages into R environment:

-   [sf](https://r-spatial.github.io/sf/) is use for importing and handling geospatial data in R,

-   [tidyverse](https://www.tidyverse.org/) is mainly use for wrangling attribute data in R,

-   [tmap](https://r-tmap.github.io/tmap/) will be used to prepare cartographic quality chropleth map,

-   [spdep](https://r-spatial.github.io/spdep/) will be used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   [funModeling](https://cran.r-project.org/web/packages/funModeling/vignettes/funModeling_quickstart.html) will be used for rapid Exploratory Data Analysis

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, readr, dplyr, tidyr,funModeling)
```

## 1.2 Importing Geospatial Data

In this in-class data, two geospatial datasets will beused, they are:

-   geo_export

-   nga_ADM2

### 1.2.1 Importing Geospatial Data

First, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.

```{r}
#| eval: false
wp <- st_read(dsn = "data",
                   layer = "geo_export",
                   crs = 4326) %>%
  filter(clean_coun == "Nigeria")

```

Things to learn from the code chunk above:

-   `st_read()` of **sf** package is used to import *geo_export* shapefile into R environment and save the imported geospatial data into simple feature data table.

-   `filter()` of dplyr package is used to extract water point records of Nigeria.

Next, `write_rds()` of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called *wp_nga.rds* and it is saved in *geodata* sub-folder.

```{r}
#| eval: false
write_rds(wp, "data/wp_nga.rds")
```

### 1.2.2 Import Nigeria LGA Boundary data

Now, we are going to import the LGA boundary data into R environment by using the code chunk below.

```{r}
#| eval: false
nga <- st_read(dsn = "data",
               layer = "geoBoundaries-NGA-ADM2",
               crs = 4326)
```

Thing to learn from the code chunk above.

-   `st_read()` of **sf** package is used to import *nga_admbnda_adm2_osgof_20190417* shapefile into R environment and save the imported geospatial data into simple feature data table.

## 1.3 Data Wrangling

### 1.3.1 Recoding NA values into string

In the code chunk below, `replace_na()` is used to recode all the *NA* values in *status_cle* field into *Unknown*.

```{r}
#| eval: false
wp_nga <- read_rds("data/wp_nga.rds") %>%
  dplyr::mutate(status_cle = 
           replace_na(status_cle, "Unknown"))
```

### 1.3.2 EDA

In the code chunk below, `freq()` of **funModeling** package is used to display the distribution of *status_cle* field in *wp_nga*.

```{r}
#| eval: false
freq(data=wp_nga, 
     input = 'status_cle')
```

The above bar chart provide a brief understanding that the percentage of water-points that are functional in Nigeria is slightly less than 50%. It is crucial thus to dive deeper to determine if there are significant pattern in areas that do not have functional water-points and if the neighbouring areas can support those areas that face scarcity in water supply.

Observe that there are two categories with similar names (i.e. 'Non-functional due to dry season' and 'Non functional due to dry season', we will standardise this by changing that later to 'Non-functional due to dry season'. We will also group those waterpoint which are marked 'Abandoned' with those that are grouped under 'Abandoned/Decommissioned'.

```{r}
#| eval: false
wp_nga$status_cle[wp_nga$status_cle == "Non functional due to dry season"] <- "Non-Functional due to dry season"
wp_nga$status_cle[wp_nga$status_cle == "Abandoned"] <- "Abandoned/Decommissioned"
```

We rerun the above code to get the following chart

```{r}
#| eval: false
freq(data=wp_nga, 
     input = 'status_cle')
```

![Distribution of water-points by status](image/Dist_wpt.jpg)

## 1.4 Extracting Water Point Data

In this section, we will extract the water point records by using classes in *status_cle* field.

### 1.4.1 Extracting functional water point

In the code chunk below, `filter()` of dplyr is used to select functional water points.

```{r}
#| eval: false
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
#| eval: false
freq(data = wpt_functional,
     input = "status_cle")
```

### 1.4.2 Extracting non-functional water point

In the code chunk below, `filter()` of dplyr is used to select non-functional water points.

```{r}
#| eval: false
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Non-Functional",
             "Non-Functional due to dry season"))
```

```{r}
#| eval: false
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### 1.4.3 Extracting water point with Unknown class

In the code chunk below, `filter()` of dplyr is used to select water points with unknown status.

```{r}
#| eval: false
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

1.5 Performing Point-in-Polygon Count

```{r}
#| eval: false
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

## 1.6 Saving the Analytical Data Table

```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`)
```

Things to learn from the code chunk above:

-   `mutate()` of **dplyr** package is used to derive two fields namely *pct_functional* and *pct_non-functional*.

Now, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.

```{r}
#| eval: false
write_rds(nga_wp, "data/nga_wp.rds")
```

## 1.7 Visualising the Spatial Distribution of Water Points

```{r}
#| fig-width: 14
#| fig-height: 12
nga_wp <- read_rds("data/nga_wp.rds")
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_mode("view")
tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)


```

Based on the above chart, we observe that in terms of functional water-points the north-west zone has the most functional water-points the number of non-functional water-points seems to be scattered all over in Nigeria.

It is interesting to note that while the district Ifelodun has a relatively higher number of functional waterpoints, it also has the highest number of non-functional waterpoints.

In terms of unknown waterpoint statuses it it mostly populated in the north-central zone of Nigeria.

## Summary Statistics of the data

First we will take a look the dataset.

```{r}
head(nga_wp, n= 10)
```

### 1.8.1 Top 10 areas with the most functional waterpoints

```{r}
top_func <- nga_wp %>%
  dplyr::top_n(10, `wpt functional`) %>%
  dplyr::select(shapeName, `wpt functional`)
top_func
```

```{r}
plot(nga_wp)
```

## 1.9 Transforming the projection of preschool from wgs84 to svy21

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

The print below reveals that the assigned coordinates system is [WGS 84](https://epsg.io/4326), the \'World Geodetic System 1984\' which is inappropriate in our case and should be using the CRS of Nigeria with an ESPG code of either 26391, 26392, and 26303. A country\'s epsg code can be obtained by referring to [epsg.io](https://epsg.io/).

We will just use the EPSG code of 26391 in our analysis.

```{r}
st_geometry(nga_wp)
```

Therefore, we need to reproject `nga_wp` from one coordinate system to another coordinate system mathemetically using the st_transform function of the sf package, as shown by the code chunk below.

```{r}
nga_wp26391 <- st_transform(nga_wp, crs = 26391)
```

Next, we will view the content of nga_wp26391 sf data frame as shown below.

```{r}
st_geometry(nga_wp26391)
```

Notice that instead of Geodetic CRS it has been changed to a Projected CRS of Minna / Nigeria West Belt.


## Limitations/ Further work

For future work to consider demarcate the different regions in Nigeria as outline below to understand better if certain region faced water shortage more severely than other regions.
