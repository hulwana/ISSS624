---
title: "Take-home Exercise 2"
author: "Hulwana"
editor: visual
execute: 
  eval: false
---

# 1 Overview

# 1.1 Getting Started

### 1.1.1 Load Packages

For our analysis, we will utilize the following packages:

-   sf - for importing and processing geospatial data,

-   tidyverse - for importing and processing non-spatial data. In this exercise, readr package will be used for importing wkt data and dplyr package will be used to wrangling the data.

We will run the following code chunk to load the required packages:

```{r}
pacman::p_load(sf, tidyverse, tmap, tigris)
```

### 1.1.2 Import Data

#### 1.1.2.1 Importing water point data

```{r}
wp_nga <- read_csv("data/aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria") %>%
  select(6:10,22,26,42:47,49, 55:57,62)
```

Thing to learn from the code chunk above:

-   The original file name is called *Water_Point_Data_Exchange\_-\_PlusWPdx.csv,* it has been rename to *WPdx.csv* for easy encoding.

-   Instead of using `read.csv()` of Base R to import the csv file into R, `read_csv()` is **readr** package is used. This is because during the initial data exploration, we notice that there is at least one field name with space between the field name (ie. *New Georeferenced Column*)

-   The data file contains water point data of many countries. In this study, we are interested on water point in Nigeria on. Hence, `filter()` of **dplyr** is used to extract out records belong to Nigeria only.

#### Convert wkt data

After the data are imported into R environment, it is a good practice to review both the data structure and the data table if it is in tibble data frame format in R Studio.

Notice that the newly imported tibble data frame (i.e.Â wp_nga) contains a field called *New Georeferenced Column* which represent spatial data in a textual format. In fact, this kind of text file is popularly known as **Well Known Text** in short **wkt**.

Two steps will be used to convert an asptial data file in wkt format into a sf data frame by using sf.

First, `st_as_sfc()` of sf package is used to derive a new field called *Geometry* as shown in the code chunk below.

```{r}
wp_nga$Geometry <- st_as_sfc(wp_nga$`New Georeferenced Column`)
```

Next, `st_sf()` will be used to convert the tibble data frame into sf data frame.

```{r}
wp_sf <- st_sf(wp_nga, crs=4326) 
wp_sf
```

When the process completed, a new sf data frame called *wp_sf* will be created.

#### 1.1.2.2 Importing Nigeria LGA level boundary data

For the purpose of this exercise, shapefile downloaded from [geoBoundaries](https://www.geoboundaries.org/) portal will be used.

```{r}
nga <- st_read(dsn = "data/geospatial",
               layer = "nga_admbnda_adm2_osgof_20190417",
               crs = 4326) %>%
  select(3:4,8:9,17)
```

## 1.2 Data Preparation

Before proceeding to the geospatial analysis, we will first prepare the data.

### 1.2.1 Checking duplicated area names

We will first check if there are any duplicated areas by running the following code chunk:

```{r}
dup <- nga$ADM2_EN[duplicated(nga$ADM2_EN)]
dup
```

From the above, we see that areas Bassa, Ifelodun, Irepodun, Nasarawa, Obi and Surulere have duplicated labelling.

We will then plot the duplicated areas to determine to understand where are the areas with duplicated names

```{r}
# dup_areas <- nga %>%
#   filter(ADM2_EN %in% c("Bassa", "Ifelodun", "Irepodun", "Nasarawa", "Obi", "Surulere")) %>%
#   select(ADM2_EN, geometry)

dup_areas <- nga %>%
  filter(ADM2_EN %in% dup) %>%
  select(ADM2_EN, geometry)

state_borders <- nga %>%
  select(ADM1_EN, geometry)

#state <- tigris::states()

## to access the shape of the states

tmap_mode("view")

tm_shape(state_borders) +
  tm_fill("ADM1_EN") +
tm_shape(dup_areas) +
   tm_polygons("ADM2_EN", alpha = 0.08) +
  tm_layout(legend.show = FALSE)
#   tm_layout(legend.position=c("center", "center"),
# 				design.mode =TRUE,
# 				legend.outside = TRUE,
# 				legend.outside.size = .3) 

```

Upon searching on the web based on the information gathers in [nigeriainfopedia](https://nigerianinfopedia.com.ng/full-list-of-local-government-areas-in-nigeria/), we realised that the duplication in names exist due to areas having similar names in different state. The states at which these areas are located are as follows:

```{r}
dup_areas_state <- nga %>%
  filter(ADM2_EN %in% dup) %>%
  select(ADM2_EN, ADM1_EN)

dup_areas_state
```

Since these areas have duplicated names, it might result in an inaccurate analysis, and therefore has to be recoded by executing the following code chunk:

```{r}
nga$ADM2_EN[nga$ADM2_EN == "Bassa" & nga$ADM1_EN == "Kogi"] <- "Bassa (Kogi)"
nga$ADM2_EN[nga$ADM2_EN == "Bassa" & nga$ADM1_EN == "Plateau"] <- "Bassa (Plateau)"
nga$ADM2_EN[nga$ADM2_EN == "Ifelodun" & nga$ADM1_EN == "Kwara"] <- "Ifelodun (Kwara)"
nga$ADM2_EN[nga$ADM2_EN == "Ifelodun" & nga$ADM1_EN == "Osun"] <- "Ifelodun (Osun)"
nga$ADM2_EN[nga$ADM2_EN == "Irepodun" & nga$ADM1_EN == "Kwara"] <- "Irepodun (Kwara)"
nga$ADM2_EN[nga$ADM2_EN == "Irepodun" & nga$ADM1_EN == "Osun"] <- "Irepodun (Osun)"
nga$ADM2_EN[nga$ADM2_EN == "Nasarawa" & nga$ADM1_EN == "Kano"] <- "Nasarawa (Kano)"
nga$ADM2_EN[nga$ADM2_EN == "Nasarawa" & nga$ADM1_EN == "Nasarawa"] <- "Nasarawa (Nasarawa)"
nga$ADM2_EN[nga$ADM2_EN == "Obi" & nga$ADM1_EN == "Benue"] <- "Obi (Benue)"
nga$ADM2_EN[nga$ADM2_EN == "Obi" & nga$ADM1_EN == "Nasarawa"] <- "Obi (Nasarawa)"
nga$ADM2_EN[nga$ADM2_EN == "Surulere" & nga$ADM1_EN == "Lagos"] <- "Surulere (Lagos)"
nga$ADM2_EN[nga$ADM2_EN == "Surulere" & nga$ADM1_EN == "Oyo"] <- "Surulere (Oyo)"
```

Check if there are duplicated in LGA names after the clean-up

```{r}
nga$ADM2_EN[duplicated(nga$ADM2_EN)]
```

### 1.2.2 Point in Polygon Overlay

Although *wp_sf* sf data frame consists of a field called *#clean_adm2* which by right should provides the LGA name of the water point located. However, it is always a good practice to be more caution when dealing with data accuracy.

In this section, we are going to use a geoprocessing function (or commonly know as GIS analysis) called **point-in-polygon overlay** to transfer the attribute information in *nga* sf data frame into *wp_sf* data frame.

```{r}
wp_sf <- st_join(wp_sf, nga) 
  
```

Notice that a new field called *shapeName* has been added into *wp_sf* sf data frame. as shown below.

```{r}
#| eval: false
write_rds(wp_sf, "data/wp_sf.rds")
```
