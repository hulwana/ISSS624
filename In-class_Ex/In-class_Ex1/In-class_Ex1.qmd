---
title: "In-class Exercise 1"
editor: visual
---

## 1 Overview

For this In-class Exercise 1, we will import and prepare geospatial data using R.

## 1.1 Getting Started

The code chunk below will install and load tidyverse and sf packages.

```{r}
packages = c('sf', 'spdep', 'tmap', 'tidyverse')
for (p in packages){
  if(!require(p, character.only = T)){
    install.packages(p)
  }
  library(p,character.only = T)
}
```

## 1.2 Importing Geospatial Data

### 1.2.1 Importing polygon features

This code chunk will import ESRI shapefile into R. SVY21 is a Singapore projection system and the units is in metres. We also need to indicate the layer in the directory.

```{r}
#mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

### 1.2.2 Importing polyline feature data in shapefile form

The code chunk below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame. We need the projected coordinated system as we want to calculate the distance. The projected crs reflect the earth with different country having different coordinated systems.

```{r}
#cyclingpath <- st_read(dsn = "data/geospatial", 
#                         layer = "CyclingPath")
```

### 1.2.3 Importing GIS data in kml format

As the `pre-schools-location-kml` is in kml format, the syntax for importing the data differs slightly.

```{r}
#preschool <- st_read("data/geospatial/pre-schools-location-kml.kml")
```

As the above data is having a geodetic CRS of WGS 84 which is not efficient for geospatial analysis and therefore needs to be transformed into Singapore system of 3414.

### Importing and transforming into projected coordinates system

```{r}
#preschool <- st_read("data/geospatial/pre-schools-location-kml.kml") %>%
#  st_transform(crs = 3414)
```

## PART 2: Spatial Weights and Applications

## 1.3 Import Data

### 1.3.1 Import Hunan geospatial data

The below extracted data source consists mainly of geospatial information for the various areas in Hunan.

```{r}
hunan <- st_read(dsn = "data/geospatial2", layer = "Hunan")
```

### 1.3.2 Importing attribute data in csv

The below imported data contains data of demographic and finances data such as average wage, government expenses and revenue as well as population size for each areas in Hunan.

```{r}
hunan2012 <- read_csv("data/aspatial2/Hunan_2012.csv")
```

### 1.3.3 Performing relational join

To combine the geospatial dataset and attribute data of Hunan for further visualization and analysis, we will first need to join them based on a common key. As 'County' is the only key present in both datasets it will be joined based on this field.

```{r}
hunan <- left_join(hunan, hunan2012)
```

## 1.4 Visualizing Regional Development Indicator

We will create 2 geo visualization, the first being the mapping of the different areas in Hunan (left diagram) and the second being the gdp density of the different areas in Hunan.

```{r}
basemap <- tm_shape(hunan) + 
  tm_polygons() +
  tm_text("NAME_3", size = 0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp = 1, ncol =2)
```

```{r}
hunan_60000 <- hunan %>% filter(GDPPC>60000) %>% select(NAME_3, GDPPC)
hunan_60000
```

We observe that areas Liuyang, Ningxiang, Wangcheng, Zixing, Lengshuijiang and Changsha have GDPPC of 60,000 and above.

## 1.5 Computing Continuity Spatial Weight

### 1.5.1 Computing (QUEEN) continuity based neigbours

To compute Queen continuity weight matrix, we will use the [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of [**spdep**](https://r-spatial.github.io/spdep/) package.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.

For each polygon in our polygon object, *wm_q* lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.

We can retrive the county name of Polygon ID=1 by using the code chunk below:

```{r}
hunan$County[1]
```

The output reveals that Polygon ID=1 is Anxiang county.

To reveal the county names of the five neighboring polygons, the code chunk will be used:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

We can retrieve the GDPPC of these five countries by using the code chunk below.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The printed output above shows that the GDPPC of the five nearest neighbours based on Queen\'s method are 20981, 34592, 24473, 21311 and 22879 respectively.

You can display the complete weight matrix by using *str()*.

```{r}
str(wm_q)
```
